diff --git a/Makefile b/Makefile
index 340d9c8..9dad818 100644
--- a/Makefile
+++ b/Makefile
@@ -83,7 +83,7 @@ configure: ;
 
 $(call set-vpath, $(SRC_PATH))
 
-LIBS+=-lz $(LIBS_TOOLS)
+LIBS+= $(LIBS_TOOLS)
 
 HELPERS-$(CONFIG_LINUX) = qemu-bridge-helper$(EXESUF)
 
diff --git a/linux-user/linuxload.c b/linux-user/linuxload.c
index 506e837..267b35a 100644
--- a/linux-user/linuxload.c
+++ b/linux-user/linuxload.c
@@ -51,9 +51,9 @@ static int prepare_binprm(struct linux_binprm *bprm)
     if(!S_ISREG(mode)) {	/* Must be regular file */
 	return(-EACCES);
     }
-    if(!(mode & 0111)) {	/* Must have at least one execute bit set */
-	return(-EACCES);
-    }
+//    if(!(mode & 0111)) {	/* Must have at least one execute bit set */
+//	return(-EACCES);
+//    }
 
     bprm->e_uid = geteuid();
     bprm->e_gid = getegid();
diff --git a/linux-user/mmap.c b/linux-user/mmap.c
index 78e1b2d..8df65b7 100644
--- a/linux-user/mmap.c
+++ b/linux-user/mmap.c
@@ -372,9 +372,10 @@ abi_long target_mmap(abi_ulong start, abi_ulong len, int prot,
                      int flags, int fd, abi_ulong offset)
 {
     abi_ulong ret, end, real_start, real_end, retaddr, host_offset, host_len;
+    int need_read;
 
     mmap_lock();
-#ifdef DEBUG_MMAP
+/*
     {
         printf("mmap: start=0x" TARGET_ABI_FMT_lx
                " len=0x" TARGET_ABI_FMT_lx " prot=%c%c%c flags=",
@@ -399,8 +400,7 @@ abi_long target_mmap(abi_ulong start, abi_ulong len, int prot,
         }
         printf("fd=%d offset=" TARGET_ABI_FMT_lx "\n", fd, offset);
     }
-#endif
-
+*/
     if (offset & ~TARGET_PAGE_MASK) {
         errno = EINVAL;
         goto fail;
@@ -460,6 +460,32 @@ abi_long target_mmap(abi_ulong start, abi_ulong len, int prot,
 
         host_len = len + offset - host_offset;
         host_len = HOST_PAGE_ALIGN(host_len);
+        if ( !(flags & MAP_ANONYMOUS) )
+        {
+            /* msync() won't work here, so we return an error if write is
+               possible while it is a shared mapping */
+            if ((flags & MAP_TYPE) == MAP_SHARED &&
+                (prot & PROT_WRITE)) {
+                errno = EINVAL;
+                goto fail;
+            }
+            retaddr = target_mmap(start, len, prot | PROT_WRITE, flags |
+                                  MAP_PRIVATE | MAP_ANONYMOUS| MAP_FIXED,
+                                  -1, 0);
+            //printf( "File remap: got %x\n", retaddr );
+            if (retaddr == -1)
+                goto fail;
+            if (pread(fd, g2h(start), len, offset) == -1)
+                goto fail;
+            if (!(prot & PROT_WRITE)) {
+                ret = target_mprotect(start, len, prot);
+                if (ret != 0) {
+                    start = ret;
+                    goto the_end;
+                }
+            }
+            goto the_end;
+        }
 
         /* Note: we prefer to control the mapping address. It is
            especially important if qemu_host_page_size >
@@ -500,8 +526,7 @@ abi_long target_mmap(abi_ulong start, abi_ulong len, int prot,
 
         /* worst case: we cannot map the file because the offset is not
            aligned, so we read it */
-        if (!(flags & MAP_ANONYMOUS) &&
-            (offset & ~qemu_host_page_mask) != (start & ~qemu_host_page_mask)) {
+        if ( !(flags & MAP_ANONYMOUS)) {
             /* msync() won't work here, so we return an error if write is
                possible while it is a shared mapping */
             if ((flags & MAP_TYPE) == MAP_SHARED &&
@@ -570,11 +595,10 @@ abi_long target_mmap(abi_ulong start, abi_ulong len, int prot,
  the_end1:
     page_set_flags(start, start + len, prot | PAGE_VALID);
  the_end:
-#ifdef DEBUG_MMAP
-    printf("ret=0x" TARGET_ABI_FMT_lx "\n", start);
-    page_dump(stdout);
-    printf("\n");
-#endif
+//    printf("ret=0x" TARGET_ABI_FMT_lx "\n", start);
+//    page_dump(stdout);
+//    printf("\n");
+
     tb_invalidate_phys_range(start, start + len);
     mmap_unlock();
     return start;
diff --git a/linux-user/signal.c b/linux-user/signal.c
index 9d4cef4..f1dede9 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -83,6 +83,8 @@ static uint8_t host_to_target_signal_table[_NSIG] = {
        host libpthread signals.  This assumes no one actually uses SIGRTMAX :-/
        To fix this properly we need to do manual signal delivery multiplexed
        over a single host signal.  */
+#define __SIGRTMIN	32
+#define __SIGRTMAX	64
     [__SIGRTMIN] = __SIGRTMAX,
     [__SIGRTMAX] = __SIGRTMIN,
 };
diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index f62c698..894d0d0 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -4708,7 +4708,8 @@ static int target_to_host_fcntl_cmd(int cmd)
     }
     return -TARGET_EINVAL;
 }
-
+#define F_EXLCK		4
+#define F_SHLCK		8
 #define TRANSTBL_CONVERT(a) { -1, TARGET_##a, -1, a }
 static const bitmask_transtbl flock_tbl[] = {
     TRANSTBL_CONVERT(F_RDLCK),
@@ -5109,7 +5110,7 @@ static inline abi_long target_to_host_sigevent(struct sigevent *host_sevp,
     host_sevp->sigev_signo =
         target_to_host_signal(tswap32(target_sevp->sigev_signo));
     host_sevp->sigev_notify = tswap32(target_sevp->sigev_notify);
-    host_sevp->_sigev_un._tid = tswap32(target_sevp->_sigev_un._tid);
+//    host_sevp->_sigev_un._tid = tswap32(target_sevp->_sigev_un._tid);
 
     unlock_user_struct(target_sevp, target_addr, 1);
     return 0;
